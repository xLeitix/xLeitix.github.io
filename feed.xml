<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://xleitix.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://xleitix.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-11T16:13:18+00:00</updated><id>https://xleitix.github.io/feed.xml</id><title type="html">blank</title><subtitle>Academic website of Philipp Leitner. </subtitle><entry><title type="html">Read More!</title><link href="https://xleitix.github.io/blog/2025/read-more/" rel="alternate" type="text/html" title="Read More!"/><published>2025-07-04T13:01:41+00:00</published><updated>2025-07-04T13:01:41+00:00</updated><id>https://xleitix.github.io/blog/2025/read-more</id><content type="html" xml:base="https://xleitix.github.io/blog/2025/read-more/"><![CDATA[<p>As a, by now reasonably experienced, PhD supervisor, students (mine and others) sometimes ask me the question how they can improve their work. Of course the answer to that question varies as much as individuals and their experiences do, but there is one reply I give more than any other:</p> <p><strong>Read more scientific papers.</strong></p> <p>Reading papers is great. You learn what the state of the art in a field you are not intimately aware of is, you learn what others are currently excited about (spoiler: right now it’s LLMs), and you invariably improve your own writing skills. Maybe most importantly, I have found that the best way to generate ideas yourself is to read and think about other’s research.</p> <p>And yet I see that surprisingly many talented PhD students in software engineering do not quite know how to best interact with the existing body of research. Overall, I believe many PhD students make one or multiple of the following mistakes:</p> <p><strong>Problem 1: “You don’t read enough papers.”</strong></p> <p>It’s hard to give a specific number of what is “enough”, but overall my impression is that most students would profit from reading more than they do. As a guideline, reading multiple papers per week in an average work week should probably be your normal.</p> <p>My suspicion why students often don’t read enough is that reading feels like a low “Return on Invest” activity, that there are usually other ways to spend your time that feel more productive in the moment.</p> <p>But: reading is easy. (Almost) no matter how tired, unmotivated, or distracted you are, you can still read papers. Use reading as a downtime activity when your brain isn’t quite in the state to do the more demanding parts of your PhD.</p> <p><strong>Problem 2: “You don’t read the right papers.”</strong></p> <p>Even when students read, I often feel they are not reading the <em>right</em> papers. My recommendation is to read broadly rather than getting stuck in your specific research niche. Personally, I regularly read papers on virtually all topics of software engineering, along with the occasional work in programming languages, distributed systems, or databases. Every now and then I also read in psychology, education, or business. On the other hand, there are plenty of articles in my narrowly defined area of research that I know exist, but have never actually read.</p> <p>Why? Because I strongly prioritize <em>good </em>papers over <em>relevant</em> papers. I would much rather read a really cool, well-written, thought-provoking article in programming languages than torture myself with a badly-written and/or uninteresting performance engineering piece. A corollary of this is that the likelihood of me actually reading an article is inversely proportional to the article’s length.</p> <p><em>Don’t torture yourself with bad papers</em>. Every now and then we all are forced to work through some very confusing piece of research (either because we are asked to review it, or because it is sufficiently close to our work that we just cannot ignore it), but for the largest part — if a paper is not interesting to read, nobody can make you.</p> <p>If you hate reading or think it’s a huge chore, that’s probably because you are reading the wrong papers.</p> <p><strong>Problem 3: “You don’t read papers the right way.”</strong></p> <p>When I talk about “reading” a paper, I rarely mean <em>“study a paper carefully end-to-end.”</em> The goal of reading a paper rarely is to understand 100% of it or memorize the results. Instead, focus on the main take-aways, ideas, storylines, writing styles, what datasets are being used, what methodological approaches authors take, or what visualizations they use. Any interesting paper, even from a different domain, will have <em>something</em> that you can take with you for your own work.</p> <p>Feel free to glance over sections that you don’t find so relevant (interestingly enough, for me this often means that I read the introduction and method, but then entirely skip the actual results — turns out I was more interested in how they planned their experiments and some high-level findings, but did not care all that much about their detailed numbers). If no section in the paper seems particularly appealing, skip the entire paper. There is nothing wrong with opening an interesting-sounding paper only to close it again 5 minutes later — I do it all the time myself. Authors are not owed our time and attention.</p> <p>Overall, I believe you should learn to be able to go over a paper in an hour or two. If it takes you most of a day to read a paper in an area that you have at least some prior knowledge in, you will inevitably fall behind in your reading and start resenting it.</p> <p>Also, <em>don’t batch your reading</em>. Doing a “literature review” where you spend a month doing nothing but reading every day is much less valuable than checking out a few papers every week, next to your own experiments and writing. Papers crammed in a literature review will invariably start blending together in your head, and a short time later you will not remember specifics about any of them.</p> <p>One thing that <em>is</em> important: after reading a paper, take the time to <em>reflect</em> on what you have learned. Ideal would be to discuss the paper with a colleague or supervisor, but that’s often not possible. Honestly, I often talk to myself about interesting papers I read, and that seems to work (almost) as good as discussing the paper with colleagues. However, as we know from didactics, without any form of repetition you will struggle to retain much of what you have read.</p> <p>In the end, the papers you read will shape the papers you write — so choose wisely, read broadly, and read often. And remember that, just as you do not owe attention to anything others have written, your papers are not owed attention purely by existing, either.</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6c4d5698015f" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Some Frequent Writing Tips I Give Software Engineering Thesis Students</title><link href="https://xleitix.github.io/blog/2021/some-frequent-writing-tips-i-give-software-engineering-thesis-students/" rel="alternate" type="text/html" title="Some Frequent Writing Tips I Give Software Engineering Thesis Students"/><published>2021-07-02T21:37:22+00:00</published><updated>2021-07-02T21:37:22+00:00</updated><id>https://xleitix.github.io/blog/2021/some-frequent-writing-tips-i-give-software-engineering-thesis-students</id><content type="html" xml:base="https://xleitix.github.io/blog/2021/some-frequent-writing-tips-i-give-software-engineering-thesis-students/"><![CDATA[<p>There is some writing-related advise I have found myself giving over and over to many of my thesis students (as well as some doctoral students) — so I decided to write a writing FAQ rather than dozens of individual emails. A few comments before we get started:</p> <ul><li>The text is mainly written with bachelor and master students working on their thesis report (and especially those in software engineering or closely related disciplines) in mind. However, large parts will also be applicable to any other kind of academic texts, such as scientifc papers or class reports. That said, do note that conventions between different fields (even within Computer Science) vary quite a bit.</li><li>Evidently, all of the following is my personal view. I don’t claim to be an expert writing guru. However, I have supervised in the range of 30 student projects, (co-)authored over a 100 papers, and reviewed a couple of factors as many. That said, at the end of the day, the stylistic preferences of your examiner or examination committee are more important than anything I write here.</li><li>I will be talking exclusively about writing your report. This is not the right place if you are looking for tips how to plan and conduct your research.</li><li>The text uses Latex terminology in a few places and assumes that you actually use Latex (rather than, say, MS Word). Most of the text will still be applicable if you don’t use Latex, but you’ll need to translate the terminology here and there.</li></ul> <p>I expect that this will become some sort of living documents, with me adding tips and refining what’s already there based on my ongoing supervising experience.</p> <p><em>Changelog:</em></p> <p>26–07–21: added that this text assumes usage of Latex, added some more FAQs</p> <h3>Outlining</h3> <p>Your outline is the skeleton of your report. It’s the structure that holds everything together, and if your outline is confusing there isn’t much the rest of your text can do to fix it. Hence, it pays to put a little love and thought into what you describe where.</p> <ul><li><strong>Have a standard top-level outline</strong>. I understand the desire to innovate, but the top-level structure (the sections or chapters) of your report is not the place to let your creativity flow. Thesis reports in software engineering tend to follow a standardised template. Start with the following structure: (1) Introduction, (2) Background, (3) Related Work, (4) Method, (5) Results, (6) Discussion, and (7) Conclusions. Some deviations are plausible (e.g., not every report needs a background), but if you feel you need additional sections, think hard about whether this content really should not just be a subsection in one of the sections above. Ask your supervisor for examples of good previous theses and study what they write where.</li><li><strong>Your report needs to tell a story</strong>. You describe a difficult problem in the introduction, show how previous approaches have not solved this problem in the related work section, describe how you will tackle it in the method, show how well it went in the results, and describe what your results mean in a broader context (and especially who should care about these results) in the discussion. Develop your story early in the writing process (I have found it helps to explain your thesis to other people front-to-back, if necessary a <a href="https://rubberduckdebugging.com">rubber duck</a>).</li><li><strong>Describe what’s needed for your story to work. Not more, not less.</strong> Whenever you describe <em>anything</em> in your report, think about how the thing you are currently writing supports your story. Counter-intuitively, your thesis report does <em>not</em> need to report everything that you have done, and it does not need to report on results in the order you have acquired them. Only the parts that help your story need to be reported. <em>This does not mean that you should cherry-pick your best data </em>(your story can easily be “we tried this reasonable thing and it mostly did not work”). However, it <em>does</em> mean that auxiliary results you find mildly interesting but which are only loosely connected to your main story should probably be left out. By and large the same is true for ideas you toyed around with but which went nowhere conclusive.</li><li><strong>Plan what you write. </strong>Different people have different writing approaches, and I’m not going to tell you what will work best for you. Some need to assemble most of the text in their head before they can start writing a section, and others start dumping text to the page immediately and then edit and edit again. You do you. <em>However</em>, at some point in the process you need to stop and think about what you are actually writing. Every section consists of subsections (which in turn may consist of sub-subsections), and all of these sections consist of paragraphs. Each paragraph should have more or less one idea, and these ideas need to logically build onto each other. Think about what each paragraph and section contributes to the story of your thesis and the smaller story of this section, either before writing anything or when editing. However, <em>do</em> think about it. The one approach I never see working is dumping lots of text onto a page and then micro-editing it ad infinitum without ever looking at the larger composition of the text.</li><li><strong>Be mindful of repetition</strong>. Repetition, if used sparsely and strategically, can be a powerful tool to emphasize key findings or key aspects of your work. However, in general, you should avoid repeating the same argument or data in different places in your thesis report, unless you have a specific reason why it is important to emphasise a specific argument.</li><li><strong>Be mindful of the order in which you explain things</strong>. Your report should be written for a person with no prior knowledge of your work. That means that you cannot, for example, write your introduction with the assumption in mind that your reader already knows roughly what your method looks like. You can safely assume that your reader has normal computer science knowledge that can be expected from an average graduate of your program. Beyond that, the only prior knowledge you can expect in Section N is what you have explicitly described in Section 1 to Section N-1. Watch out for this specifically when proof-reading your work — will the reader be lacking context or prior knowledge to follow your argument? If yes, this context or prior knowledge needs to be established earlier (often in the introduction or background section).</li></ul> <h3>On Floats (Figures, Tables, etc.)</h3> <p>“Floats” are all the things in your thesis that <em>aren’t </em>text, such as figures, tables, algorithms, code snippets, interview quotations, etc (not all of them are strictly “Latex floats”, but you get the idea).</p> <p>This will be a somewhat long section, since many students struggle with how to use floats effectively in their reports.</p> <ul><li><strong>There is a duality between floats and text</strong>. Floats and text live side-by-side in your report, and they need to tell your story <em>together</em>. You can’t have only text, but you <em>also </em>can’t have only floats. Both are important. That said, in most cases students aren’t using nearly enough floats.</li><li><strong>All floats need to be described in text (…)</strong> Depending on the type of float and its purpose in your story, the float may sometimes provide an overview which is then detailed in the text (example: your method section will often have a graphical overview of the steps of your research, which are then described in more detail in the text). In other cases, the float has the details whereas the text only provides a summary or interpretation (example: tables or graphs will often contain much more detail than the text describing it). Yet, in both cases, the float needs to at least be introduced in the text, and in both cases the float and text work together. Don’t put a figure in and expect the reader to guess when to look at it, and what to look for specifically. As a high-level guideline, I am hoping to roughly understand your story from looking at your floats alone, and when detailedly reading the report the text should make clear when to look at which float (and what I should note in it).</li><li><strong>(…) and most text should be accompanied by a float. </strong>Most students have a tendency to produce predominantly text (“walls of text”), and to only add figures or tables if clearly and evidently necessary (e.g., in the results). This leads to thesis reports that are exceptionally unpleasant to read. Consider generously adding floats, if for no other reason than to give your text structure and to make it a less tedious read (however, once you start doing that, you will find that often the float you added originally as window dressing actually <em>does</em> make your story a lot more easy to digest). For scientific papers my personal guideline is that every page that is only text (no title page, no figure, no table, no quotation, no nothing) is ugly and should be avoided. For thesis reports you can be a bit more generous, but if you have, say, 5 consecutive pages of “only text” you should start to wonder if something can be done to make this part less tedious.</li><li><strong>All important results should be supported by a float (…) </strong>do not, I repeat, <em>do not </em>hide important data in your text alone. If you are doing quantitative work, all important results should be shown in a table or figure. If you are analyzing interview data, all important arguments should be accompanied by a related interview quote.</li><li><strong>(…) and all important results should be interpreted in text</strong>. It’s not enough if your important results are shown in a float, they <em>also</em> need to be mentioned <em>and interpreted</em> in the text. Yes, this sometimes leads to small redundancies. That’s fine. That said, if you feel your text is just re-iterating what the float already shows, your text isn’t actually providing an interpretation of your results, just a transcript. The fix is then to improve your text, not remove it. For example, assume you have a table that shows survey responses in %. Your text should <em>not</em> just say “45% have picked option A, but only 12% have picked option B.” Your text needs to <em>discuss </em>these results — are they unexpected, or in line with existing work? What can be learned from these results? Do they fit previous results you have presented earlier in your report? Similarly, if you discuss a plot (for example, some performance measurements), your text should not just say that “the response time is stable at about 65ms”, but should provide an interpretation of what this actually means. Is 65ms good? Did we expect a stable performance, or did we expect that performance would improve over time? This interpretation doesn’t have to be long, but it <em>does</em> have to be there and it should not be entirely trivial. Interpreting your results is part of the research, and presumably you had some idea of what to do with the data you collected when you started collecting it.</li><li><strong>However, not every little result needs to be discussed in text</strong>. The tip above explicitly says “important results”. It’s fine to skip discussing unimportant results. For example, your survey results table may contain a dozen different options, some of which have rarely been picked (and you did not expect them to be picked often). It’s ok to just write “Further, options E, F, and G have been selected by less than 3% of participants.”, without deeper commentary.</li><li><strong>Avoid walls of text at all costs</strong>. A “wall of text” is a long paragraph that is not broken up by the start of a new section, a float, or at the very least a paragraph break. What exactly counts as a wall of text is difficult to define in a vacuum, but every paragraph approaching a third or half page of length should be critically examined. You are probably trying to do too much in one paragraph. Think about ways to break it up. However, even with paragraphs, a text that’s just lots of paragraphs without floats or subsections can start to look like a wall of text. If your text has this problem, you are probably under-structuring it, and should be using more subsections / sub-subsections or floats.</li><li><strong>Floats can be used as a structuring tool</strong>. Good writers use float positioning cleverly to break their text when one argument is finished and the next starts, or to break up what would otherwise be a wall of text. This requires you to use the [h!] float argument in Latex (by default Latex likes to move floats to the top and gobble them together, hence the name “float” — they float through the text). This is not always required or even useful, but I have found that students who think not only about what floats to use, but also where (on which page, between which paragraphs) they should be positioned, to write the most pleasant-to-read reports.</li><li><strong>However, there is such a thing as a float that’s too obvious. </strong>Contrary to what has been discussed so far, not <em>every</em> possible float actually improves a report. Tables or pie charts that only show two numbers, “architectural diagrams” that only contain two boxes and an arrow, and similar overly simplistic floats look unprofessional and give the reader the feeling that the report needed filler material. The fix here is normally not to remove the float, but to add more detail. Can the two numbers be split up and presented in a more detailed and insightful manner (e.g., rather than just saying “response time A” and “response time B”, measure the performance of different parts of your solution)? Is the architecture of your system really that simple, or are you just massively over-abstracting?</li><li><strong>Floats need to be readable</strong>. This should go without saying, but a float that cannot be read and understood is pointless. That means that fonts in your figures should not be (much) smaller than in the text, and data in plots should not be overlapping to the extent that you cannot tell anymore what’s going on. Further, make sure that your figures are not “fuzzy” or have a distored aspect ratio — avoid this problem by only including vector graphics, avoiding bitmap formats of all sorts (PNG, JPEG, etc.), and always fixing the aspect ratio in Latex.</li><li><strong>Symbols in diagrams should have semantics</strong>. When drawing a diagram, avoid using a bunch of different types of boxes for no reason at all. Preferably, use a well-defined notation such as the UML, EER, or BPMN. If you are using your own notation, make sure that you are using the same boxes for the same type of element (and different boxes for different types of elements). Consider adding a legend to your custom-notation diagram. If you struggle defining a legend, your notation is probably not well-defined.</li><li><strong>Floats need to be your own</strong>. Never just copy-and-paste figures you found on the Internet or in other papers. You’ll need to draw your own visuals (although you can make a derivation of an existing figure, as long as you cite the source appropriately).</li><li><strong>Strive for a decent level of “visual appeal” in your figures</strong>. Not everybody is a budding graphics designer, but visually appealing figures immediately make a thesis report look substantially more professional. Do your best. It’s fine if you spend some time working on your figures. After all, they are the part of your report that stands out most to a casual reader.</li></ul> <h3>Important Overall Stylistic Tips</h3> <p>A general theme of the following tips that relate to writing style (this section and next) is that you should strive for <em>consistency</em>.</p> <ul><li><strong>Use consistent terminology</strong>. In contrast to what you may have learned in your English writing classes in school, avoid using different terms for the same concepts “for variety”. This is fine for the “general English” part of the text (do vary sentence structures, verbs, etc.), but for technical terminology, <em>pick the most fitting term and stick with it through the entire text</em>. For example, don’t use “fault tolerance” and “reliability”, or “response time” and “execution time”, interchangeably. Decide which term is most appropriate, and use only that. Flip-flopping between different terms introduces confusion.</li><li><strong>Use consistent (and appropriate) tenses</strong>. Past tense and present tense can both be appropriate in for your thesis, but be consistent. Decide whether the report is written as if you were currently doing the work (present tense), <em>or </em>as if you were writing the report after finishing the work (past tense). This decision is independent from when you actually do the writing! Don’t mix between sections, and definitely don’ mix <em>within</em> sections. An exception is the conclusions — there, only past tense really fits. Future tense should be reserved for the thesis proposal or if you are describing future work.</li><li><strong>Be careful not to speculate too much</strong>. For the largest part, everything you write in your thesis needs to be based on data (either your own or what previous work has reported, with reference). However, there are some places where you need to speculate <em>a little</em>. For instance, when interpreting results, you will need to do more than just transcribe numbers from the plot (see also the section on floats). However, make clear what is evidence that’s directly observable from your results and what is your own interpretation of that evidence. <a href="https://en.wikipedia.org/wiki/Weasel_word">Weasel words</a> (“we believe”, “the data suggests that”, etc.) can be used to certain extent, but don’t overdo it. And, of course, make sure that your interpretation is reasonable and the most likely interpretation. It should also be noted that the discussion section by its nature has more speculative content than, for instance, the results or related work sections.</li><li><strong>“Folk results” do not require a reference</strong>. Not <em>literally</em> every statement in your report needs a reference. There is a notion of “folk results”, things that are evident to everybody with experience and the field and / or common sense, and you don’t need to provide references for those. For example, a claim that “software developers would like to improve their productivity” should be sufficiently self-evident that a reference would not be required. When deciding if you need a reference for a statement, ask yourself if a reasonable colleague could doubt the veracity of the statement. If yes, you’ll need evidence through a reference (or your own data).</li><li><strong>Make sure that it’s abundantly clear what a reference refers to</strong>. When using references, the most important thing is that the text is clear about what part of your argument a reference is meant to support. For instance, if you are writing a background section that’s predominantly based on a single source, you don’t have to cite this source in every paragraph (or, worse, after every sentence) — it’s entirely sufficient to say at the beginning that “the following section is based on Leitner et al. [2].” Avoid peppering in references in random places when the sentence structure does not make it clear what I will find in that reference. For instance, in the sentence “Contrary to popular belief [3], response time is not always taken seriously by developers [4].”: it’s quite clear to me what to expect in ref. [4], but what is ref. [3] doing? For similar reasons it’s rarely good style to group many references together ([5,6,7,8,9]).</li><li><strong>Avoid grandiose claims</strong>. Be truthful (and conservative) about what your research really shows. Avoid over-stating the importance of your results, as well as over-interpreting your data. It’s fine if your research mostly provides a narrow view on an even more narrow problem (that’s what most research does), but it’s not ok if you use this narrow data to make far-reaching claims about software development or the world in general. For example, a mining study on 20 GitHub projects cannot be used to “prove that software developers do not consider performance”, nor does a survey with 50 respondents allow you to talk about software developers in general. Again, some amount of “weaseling” with weak formulations is often required to avoid unwarranted generalization (“Our interviewees consistently argued that …”). As a sidenote, the word “prove” is problematic in general — very little of what we do in software engineering research (empirical studies, design science, experiments, etc.) is suitable to “prove” anything in a strict, mathematical sense. It’s best to avoid the word entirely, unless you are actually developing a mathematical proof.</li></ul> <h3>Stylistic Nitpicks</h3> <p>Here follows a longer list of smaller, detailed comments. They aren’t individually very important, but they add up to give your report a professional look and feel.</p> <ul><li><strong>Avoid colloquial language</strong>. In formal texts, such as a paper or thesis report, you want to stay away from informal language of all sorts. This includes word contractions (“don’t”, “isn’t”), but also influences your choice of words and style. When in doubt, go for a more formal style in your report.</li><li><strong>Active voice is ok (even preferred)</strong>. In contrast to what many academic style guides say, it is nowadays perfectly fine to use active phrasing in your thesis report rather than passive (e.g., “We have collected 60M data points” versus “60M data points have been collected”). Active and passive phrasing can be mixed, but in general try to prefer active since it just sounds more natural. Never speak about yourself in third person, that’s just weird (“The authors of this thesis have interviewed 20 subjects.”).</li><li><strong>Avoid empty subsections</strong>. Every section and subsection has text, even if it’s just one sentence that explains what will follow. That means that in your Latex source code a \section{A} should never be directly followed by \subsection{B} without any normal text between.</li><li><strong>Acronyms are introduced on first usage, and subsequently only the acronym is used. </strong>Your report probably contains many acronyms (TCP, SE, WWW, …). Every acronym should be introduced when it is first used in the text in the form “full name (acronym)”, and from then on you <em>only ever use the acronym. </em>Don’t flip-flop between long and short form, and never use the acronym before it is introduced. There are many good Latex packages that automate this process (for instance the <a href="https://tex.stackexchange.com/questions/25520/how-can-i-use-the-latex-acronym-package-and-optionally-create-an-acronym-list-i">acronym</a> package). Use them. Exceptions: avoid using the short form of acronyms in the abstract as well as in section headers (acronyms that are so common that they can be considered folk knowledge, such as WWW, are ok).</li><li><strong>Be consistent about word capitalization</strong>. In titles and captions, <em>either</em> use “Normal English capitalization” or “Every Major Word Starts With a Capital Letter Capitalization”, but pick one and then stick with it. In text, avoid randomly capitalizing words (there are a few exception — notably, the word “Web”, e.g., Web applications, is often spelled with a capital W). Acronyms are often ALL CAPS. The most important thing, as always, is to be consistent — if you choose to spell “Web” with a W, then do it every time.</li><li><strong>“Labels” are spelled with a capital first letter</strong>. All kinds of “labels” that you use for cross-referencing in your report (Figure 1, Table 2, Algorithm 3, Chapter 4, etc.) are always spelled with a capital first letter. However, that’s not true if the word “figure” or “table” is just used in the normal English sense. Example: “As can be seen in <strong>F</strong>igure 1, the response time degrades after 120s of experiment time. Comparing to the results shown in the previous <strong>f</strong>igures, this is unexpected (…)”.</li><li><strong>Be consistent about formatting</strong>. If you choose to format project names in \texttt{} in one section, do it in every section. If you refer to projects in the format “orgname/projectname” in one section, do it in every section.</li><li><strong>“i.e.” and “e.g.” are always followed by a comma</strong>. “i.e.” (“id est”, or “that is”) and “e.g.” (“exempli gratia”, or “for example”) are two shortcuts that are super-frequently used in English academic texts. They are <em>always</em> followed by a comma, e.g., in the following example I am using both shortcuts in a weird, i.e., not very natural, manner. Also: don’t confuse them, they mean very different things.</li><li><strong>References are annotations, not part of the text</strong>. Think of references [5] as metadata that’s not supposed to be read. Consequently, avoid writing things like “As can be seen in [6], bots are mainly used as productivity tool.”. A better wording would be “As argued by Leitner et al. [6], bots are mainly used as productivity tool.”</li><li><strong>“et al.” is only used for papers with three or more authors</strong>. On the topic of “et al.” (“et alia”, or “and others”), this convention is only used for papers with three or more authors. For papers with a single or two authors simply write their name(s), as in “Erlenhov and Leitner have argued …”. And yes, the correct spelling is “et al.” — no dot after “et”, but with a dot after “al”.</li></ul> <h3>Writing Mechanics</h3> <p>This isn’t about your report text per se, but I felt it useful to also add some words about how to actually do the writing, and what tools to use.</p> <ul><li><strong>Use a spell checker</strong>. In the year 2021, there is <em>absolutely </em>no reason to submit a text full of spelling and grammar errors. The absolute minimum is using a basic spell checker. However, there are much better tools available that also help with grammar and even to some degree style (many people like <a href="https://www.grammarly.com\">Grammarly</a>, especially if you can fork over the money for a premium subscription). One thing is clear — don’t assume that your supervisor will handle spell-checking for you.</li><li><strong>Use Latex</strong>. There isn’t much more to say about this, but if you are writing an academic text that’s longer than a few pages, neither MS Word nor Google Docs is the right tool. Latex is.</li><li><strong>MS Excel is not a great tool for data analysis and plotting</strong>. MS Excel, well, excels at many things, but doing thesis-level data analysis and plotting isn’t one of them — and one of the reason for that is that the resulting plots will often look downright terrible (and you can’t export plots easily in a vector format either). Better options include <a href="https://ggplot2.tidyverse.org">ggplot2</a> for R or <a href="https://plotly.com/python/">Plotly</a> for Python. At the end of the day, I don’t care so much what you use to produce your plots, as long as the end result looks professional (and plots from Excel usually don’t).</li><li><strong>Use either Overleaf or store your report in a Git repo</strong>. I don’t care much how exactly you want to manage your text, but the only copy of your Latex source code should <em>not</em> be sitting on your computer. <a href="http://overleaf.com/">Overleaf</a> is quickly becoming the de-facto standard for thesis students; if you have no other preferences, then use that. Alternatively, we have run successful thesis projects where students managed their report source code using Git (and before that SVN) for years. This also works, and may be particularly attractive if you are old-fashioned like me and enjoy editing text in a good text editor.</li></ul> <h3>Supervisor Interactions</h3> <p>Finally, some tips about how to effectively collaborate with your supervisor (or any other person whose job is to give you feedback, but not do the work for you).</p> <ul><li><strong>Give your supervisor time to review your work</strong>. One of my pet peeves as supervisor is getting texts “to review” a few hours before a meeting. This most likely means that I will look over your text live during the meeting, and the best you will get are high-level comments. This is particularly important towards the end of your thesis project, when I should detailedly read your thesis. When doing your time plan for the final weeks, consider that <em>I</em> will need time to read 50–100 pages of text, and that afterwards <em>you</em> will need time to address what are often multiple pages of comments. Often, more than one such cycle is needed. In short, if your plan is to send me your first draft a week before you need to submit, we are going to have a problem.</li><li><strong>Manage your supervisor</strong>. Related to the previous point, do communicate clearly to your supervisor what you expect <em>from them</em> until the next meeting. Should I be reading specific section(s)? If yes, what kind of feedback are you looking for (Just general “is this the right direction” kind of feedback, or is the text stable and you are expecting detailed line-level comments? Should I be looking primarily at your writing, or do you want to discuss your approach and results?). Specific requests for feedback make your supervisor’s life substantially easier, especially if they are realistic (“please give me feedback on my new method figure and let me know if it’s understandable” is realistic, “please go over the entire report every week” isn’t).</li></ul> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=da2acab30381" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Announcing the JSS Happy Hour (May 29th)</title><link href="https://xleitix.github.io/blog/2020/announcing-the-jss-happy-hour-may-29th/" rel="alternate" type="text/html" title="Announcing the JSS Happy Hour (May 29th)"/><published>2020-05-13T07:25:21+00:00</published><updated>2020-05-13T07:25:21+00:00</updated><id>https://xleitix.github.io/blog/2020/announcing-the-jss-happy-hour-may-29th</id><content type="html" xml:base="https://xleitix.github.io/blog/2020/announcing-the-jss-happy-hour-may-29th/"><![CDATA[<p>To fill the void left by ICSE’s cancellation, we are planning on hosting a JSS Happy Hour on May 29th. This happy hour will be streamed via <a href="https://www.twitch.tv">Twitch.tv</a>, ensuring high quality audio and video, and will feature:</p> <ul><li><strong>SHORT video summaries</strong> of selected papers <em>(3 min or less, 10 papers or less)</em></li><li><strong>Banter from our expert panel </strong>of <a href="http://www.cs.rug.nl/~paris/">Paris Avgeriou</a>, <a href="https://www2.dmst.aueb.gr/dds/">Diomidis Spinellis</a>, and <a href="https://kstolee.github.io">Katie Stolee</a> after each video <em>(e.g., “If your result needs a statistician then you should design a better experiment”)</em></li><li><strong>Interactive crowd voting </strong>on key JSS issues via <a href="https://www.mentimeter.com">Menti.com</a> <em>(e.g., the goatee, which JSS co-EiC wears it better?)</em></li></ul> <p>We want to ensure this event captures some of the valuable community-building that is always a part of ICSE, and so we have some guidelines for watching. They are:</p> <ol><li><strong>Be interactive</strong> — One of the best parts of conferences is interacting with a large number of your peers and collaborators. Thus, we encourage you to engage fully during the broadcast. There will be three ways to engage: by chatting on Twitch.tv’s built-in chat (you’ll need an account), by answering questions on Menti.com, and by tweeting <a href="https://twitter.com/search?q=%23jssOnTwitch">#jssOnTwitch</a>.</li><li><strong>Watch with Friends </strong>— Twitch.tv is a broadcast-only medium (i.e., broadcasters cannot hear you). While we will solicit your feedback in the Twitch chat, via Menti.com, and on Twitter, it is simply not the same as interacting directly with friends. Thus, we encourage you to host watch parties. That is, set up a Zoom meeting or Google Hangout session and watch the Twitch.tv stream together with 3–6 of your best conference buddies. It’s a chance to reconnect!*</li><li><strong>Be respectful</strong> — This event is centered around community-building. Before you tweet, chat, or answer on Menti, ask yourself, would I say this in person? Is this comment constructive? We encourage you to have fun, but not at the expense of others.</li></ol> <p>* PSA — use headphones to avoid echos during the meeting.</p> <p>We hope you will join us for this fun event! All you need to do to join is visit <a href="https://twitch.tv/davidcshepherd">https://twitch.tv/davidcshepherd</a> on <strong>May 29th at 10am EST </strong>(4pm Amsterdam time/CET DST/UTC+2). For those not in these time zones we apologize! Note that the broadcast will be publicized on Twitter for your convenience.</p> <p>All the best,</p> <p>David C. Shepherd</p> <p>Paris Avgeriou</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=36cf9cf92f3c" width="1" height="1" alt=""/>&lt;hr&gt;&lt;p&gt;<a href="https://medium.com/jss-editors-selection/announcing-the-jss-happy-hour-may-29th-36cf9cf92f3c">Announcing the JSS Happy Hour (May 29th)</a> was originally published in <a href="https://medium.com/jss-editors-selection">JSS Editor’s Selection</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</p>]]></content><author><name></name></author></entry><entry><title type="html">Marking Changed Text in Journal Revisions</title><link href="https://xleitix.github.io/blog/2020/marking-changed-text-in-journal-revisions/" rel="alternate" type="text/html" title="Marking Changed Text in Journal Revisions"/><published>2020-05-05T16:07:25+00:00</published><updated>2020-05-05T16:07:25+00:00</updated><id>https://xleitix.github.io/blog/2020/marking-changed-text-in-journal-revisions</id><content type="html" xml:base="https://xleitix.github.io/blog/2020/marking-changed-text-in-journal-revisions/"><![CDATA[<p>I recently went on a bit of Twitter rage after reviewing the revision of a 40-page manuscript, where the authors in no way indicated in the manuscript what they had actually changed.</p> <h3>Philipp Leitner on Twitter</h3> <p>I swear I would be accepting twice as many review invitations if journals would ask authors to use a different color for changed text in revisions. It boggles my mind that this is so rarely done. /c @JSSoftware @ISTJrnal @ieeesoftware @emsejournal</p> <p>In the ensuing Twitter conversation, some people have asked me for how I normally mark up changed text in revisions. What I do is <em>really </em>low-tech: I simply use a different color for new or importantly changed text.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xSzotHqGmh-MSxUybTJ4wA.png"/><figcaption>Example from the revised version of <a href="https://dl.acm.org/doi/10.1145/2885497">this paper</a></figcaption></figure> <p>I find this approach to be very easy to do and less visually jarring than a full change log, while still making abundantly clear what we have updated in a manuscript.</p> <p>An appropriately low-effort way to do this is to create specific LaTeX markup for changed text, like so (requires the color package to be imported):</p> <pre>\newcommand{\rev}[1]{\textcolor{blue}{#1}}</pre> <p>You can then simply demark your changes and additions while writing:</p> <pre>Our approach outperforms all other approaches by 100%.<br />\rev{My father says so as well.}<br />Hence, the world will be changed after this manuscript is accepted.</pre> <p>This has the advantage that you don’t have to cumbersomely remove the markup for the final version — you can simply set the text color for \rev back to black and re-compile.</p> <p>This approach works well for text and text-like content (e.g., table values), but breaks down for figures. For these, I use another custom markup that draws blue lines above and beyond a changed figure (see also the right-hand side of the screenshot above). The markup to generate these frames is a custom environment based on the <em>mdframed</em> and <em>ntheorem </em>packages, and can be used like this:</p> <pre>% in preamble<br />\usepackage{mdframed}<br />\usepackage{ntheorem}<br />\theoremstyle{nonumberplain}<br />\newmdtheoremenv[%<br />  linecolor=blue,<br />  linewidth=2pt,<br />  rightline=false,<br />  leftline=false]{figrev}{}</pre> <pre>%<br />%  ...<br />%</pre> <pre>% in document<br />\begin{figrev}<br />\includegraphics[width=\linewidth]{img/litsearch.pdf}<br />\end{figrev}</pre> <p>The above code should be fairly self-explanatory and easy to adapt in case you want to change how your markup looks. Sadly, these tags you’ll actually have to manually remove before handing in your final camera-ready version (or you combine it with <a href="https://ctan.org/pkg/ifthen?lang=en">ifthen</a>, which I don’t want to get into here).</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8583136a4738" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">Earl Barr, JSS Editor of the Year 2019</title><link href="https://xleitix.github.io/blog/2020/earl-barr-jss-editor-of-the-year-2019/" rel="alternate" type="text/html" title="Earl Barr, JSS Editor of the Year 2019"/><published>2020-03-09T15:27:44+00:00</published><updated>2020-03-09T15:27:44+00:00</updated><id>https://xleitix.github.io/blog/2020/earl-barr-jss-editor-of-the-year-2019</id><content type="html" xml:base="https://xleitix.github.io/blog/2020/earl-barr-jss-editor-of-the-year-2019/"><![CDATA[<p>One of the perks of working with the Journal of Systems &amp; Software (JSS) is that you get to work with some of the best people in our community: our editors. While these editors are all top researchers, they take on the service work necessary to keep our community healthy. These editors shepherd over 500 papers per year through the review process, taking personal responsibility for the quality and timeliness of the decision. And our editors are doing an amazing job; they are returning first decisions in 10.0 weeks on average!</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/257/1*_gqFuUX6kEdZnQDQgxKbNw.png"/><figcaption>Earl Barr, JSS Editor of the Year 2019</figcaption></figure> <p>For 2019, one editor stands out: <a href="http://www.earlbarr.com/">Earl Barr</a>. While he has handled an unusually high number of papers last year (28), he has done so with excellent speed — 9.8 weeks for a first decision and 20.2 weeks for a <em>final</em> decision — and with top quality. Authors whose papers are handled by Earl always receive thorough feedback, as he ensures that reviewers provided detailed notes in their reviews. Additionally, Earl is always actively engaged both at our annual editorial board meetings (usually held at ICSE) and in correspondence throughout the year. Simply put, he makes the Journal of Systems &amp; Software a better venue through his involvement.</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fda6ad5f9e4b" width="1" height="1" alt=""/>&lt;hr&gt;&lt;p&gt;<a href="https://medium.com/jss-editors-selection/earl-barr-jss-editor-of-the-year-2019-fda6ad5f9e4b">Earl Barr, JSS Editor of the Year 2019</a> was originally published in <a href="https://medium.com/jss-editors-selection">JSS Editor’s Selection</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</p>]]></content><author><name></name></author></entry><entry><title type="html">JSS Reviewer of the Year Awards — 2019</title><link href="https://xleitix.github.io/blog/2020/jss-reviewer-of-the-year-awards2019/" rel="alternate" type="text/html" title="JSS Reviewer of the Year Awards — 2019"/><published>2020-03-09T15:05:37+00:00</published><updated>2020-03-09T15:05:37+00:00</updated><id>https://xleitix.github.io/blog/2020/jss-reviewer-of-the-year-awards2019</id><content type="html" xml:base="https://xleitix.github.io/blog/2020/jss-reviewer-of-the-year-awards2019/"><![CDATA[<h3>JSS Reviewer of the Year Awards — 2019</h3> <p>What makes a journal work? Great Editors-in-Chief? Outstanding Associate Editors? An active Editorial Board from all over the world? These players contribute, certainly, but the engine that keeps a journal running is: <strong>Reviewers</strong>.</p> <p>As we do each year, today we would like to honor the top Reviewers for The Journal of Systems &amp; Software for 2019. These reviewers have each reviewed <strong><em>at least</em></strong> 8 papers in 2019, with Lin Guan completing 17! Not only did they review many papers, but on average these reviews were completed in 24 days, helping to keep JSS handling times among the best in software engineering journals.</p> <p><strong>And the winners are:</strong></p> <ul><li><a href="https://www.lboro.ac.uk/departments/compsci/staff/academic-teaching/lin-guan/">Lin Guan</a></li><li><a href="https://xin-xia.github.io/">Xin Xia</a></li><li><a href="https://dibt.unimol.it/staff/fpalomba/">Fabio Palomba</a></li><li><a href="http://retis.sssup.it/~luca/">Luca Abeni</a></li><li><a href="https://dardin88.github.io/">Dario Di Nucci</a></li><li><a href="https://www.turing.ac.uk/people/researchers/felix-cuadrado">Felix Cuadrado</a></li><li><a href="https://emu.edu/faculty-staff/?show=szc6295">Stefano Colafranceschi</a></li><li><a href="https://dblp.uni-trier.de/pers/hd/c/Chen:Lichao">Lichao Chen</a></li><li><a href="https://profesores.virtual.uniandes.edu.co/mlinaresv/en/inicio-en/">Mario Linares-Vásquez</a></li><li><a href="https://www.win.tue.nl/~aserebre/">Alexander Serebrenik</a></li><li><a href="https://www.softwareimprovementgroup.com/about/magiel-bruntink/">Magiel Bruntink</a></li><li><a href="https://www.journals.elsevier.com/journal-of-systems-and-software/editorial-board/x-liu-phd">Xiao Liu</a></li><li><a href="https://greg4cr.github.io/">Gregory Gay</a></li></ul> <p>Today, let’s honor the people on this list. You may recognize some, do not hesitate to tweet, email, or even chat in the hallway at the next conference. It is important to let these reviewers know they are seen and appreciated. They are the engine that keeps our community healthy!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=67bac45fa12d" width="1" height="1" alt=""/>&lt;hr&gt;&lt;p&gt;<a href="https://medium.com/jss-editors-selection/jss-reviewer-of-the-year-awards-2019-67bac45fa12d">JSS Reviewer of the Year Awards — 2019</a> was originally published in <a href="https://medium.com/jss-editors-selection">JSS Editor’s Selection</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</p>]]></content><author><name></name></author></entry><entry><title type="html">The JSS “In Practice” Track</title><link href="https://xleitix.github.io/blog/2020/the-jss-in-practice-track/" rel="alternate" type="text/html" title="The JSS “In Practice” Track"/><published>2020-01-24T09:37:44+00:00</published><updated>2020-01-24T09:37:44+00:00</updated><id>https://xleitix.github.io/blog/2020/the-jss-in-practice-track</id><content type="html" xml:base="https://xleitix.github.io/blog/2020/the-jss-in-practice-track/"><![CDATA[<p>As a research-centric engineering discipline, systems and software engineering research is traditionally driven by the symbiotic relationship between theory and practice. Yet, it is commonly understood that researchers and practitioners are still having limited interactions with each other, rendering that symbiotic relationship and technology transfer cumbersome. To reduce the gap between theory and practice, the Journal of Software and Systems has introduced a new <em>In Practice</em> track. The overarching goal is to become the ideal forum in the area of systems and software for researchers carrying out investigations in industry to disseminate their results, as well as for practitioners to share their experiences with the academic community.</p> <p>Research papers to be published in this track are expected to provide value to practitioners that aim at triggering innovation and operational excellence inside their organisations based on relevant industrial research findings, or to researchers by providing practitioner insights to help them focus their research on practically relevant problems. Hence, we envision publications of this track to help bridging the gap between theory and practice and to achieve high academic and practical impact.</p> <p>JSS invites submissions in a similar scope of our journal’s main track, as long as there is a clear industry focus. More specifically, we are interested in submissions that fit into one of the following two categories:</p> <ul><li><strong>Applied Research:</strong> In this category, we invite submissions that report results (positive or negative) concerning the experience of applying/evaluating systems and software technologies (methods, techniques and tools) in real industrial settings. These comprise empirical studies conducted in industry (e.g., action research, case studies) or experience reports that may help understanding situations in which technologies really work and their impact. Submissions should include information on the industrial setting, provide motivation, explain the events leading to the outcomes, including the challenges faced, summarize the outcomes, and conclude with lessons learned, take-away messages, and practical advice based on the described experience. An extensive description of related work or background material is not required. Similarly, extensive details on the research methodology (if needed to assess the scientific rigour) should be reported as part of an appendix. While papers in this category will be evaluated also based on their scientific rigor, the focus is on their merit in reporting practically relevant results rather than in terms of academic (theoretical) novelty. <strong>At least one contributing author must be from industry.</strong></li><li><strong>Practitioner Insights:</strong> In this category, we invite experience reports showing what actually happens in practical settings, illustrating the challenges (and pain) that practitioners face, and presenting lessons learned. Problem descriptions with significant details on the context, underlying causes and symptoms, and technical and organizational impact are also welcome. Practitioner insights papers may also comprise invited opinionated views on the evolution of chosen topic areas in practice. <strong>Submissions in this category are limited to four pages and the first author must be from industry.</strong></li></ul> <p>Not in scope of the <em>In Practice</em> track are secondary studies (e.g., systematic literature reviews), studies carried out in artificial settings (e.g., controlled experiments carried out in academic settings), and studies with limited potential for scaling up to practice (e.g., survey research that is not exclusively directed at analysing contemporarily used practices, problems, or perceptions in practice). Kindly note that rather than inviting traditional research papers written and carried out by researchers and having co-authors from practice, the focus on this track is to serve as a catalyst for submissions emerging from practical settings. Hence, all submissions will be evaluated through industry-appropriate criteria and having at least one reviewer with an industry-affine affiliation. The track aims at establishing a forum for industry-related researchers and practitioners to disseminate results and make their voice being heard.</p> <p><em>Track Chairs:</em> <a href="https://www.journals.elsevier.com/journal-of-systems-and-software/editorial-board/m-kalinowski">M. Kalinowski</a>, <a href="https://www.bth.se/staff/daniel-mendez-fernandez-dmz/">D. Mendez</a></p> <p><em>Journal Editors-in-Chief:</em> P. Avgeriou, D. Shepherd</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ad268a9fab2f" width="1" height="1" alt=""/>&lt;hr&gt;&lt;p&gt;<a href="https://medium.com/jss-editors-selection/the-jss-in-practice-track-ad268a9fab2f">The JSS “In Practice” Track</a> was originally published in <a href="https://medium.com/jss-editors-selection">JSS Editor’s Selection</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</p>]]></content><author><name></name></author></entry><entry><title type="html">And the winner is…</title><link href="https://xleitix.github.io/blog/2020/and-the-winner-is/" rel="alternate" type="text/html" title="And the winner is…"/><published>2020-01-21T15:17:57+00:00</published><updated>2020-01-21T15:17:57+00:00</updated><id>https://xleitix.github.io/blog/2020/and-the-winner-is</id><content type="html" xml:base="https://xleitix.github.io/blog/2020/and-the-winner-is/"><![CDATA[<p>Last year we chose three papers to be considered for our ten-year <strong>Most Influential Paper Award</strong>. These three papers were:</p> <ul><li>A practical evaluation of spectrum-based fault localisation — A retrospective (<a href="https://medium.com/jss-editors-selection/a-practical-evaluation-of-spectrum-based-fault-localization-a-retrospective-a0d8a947a150">blog</a>, <a href="https://www.sciencedirect.com/science/article/pii/S0164121209001319?via%3Dihub">article</a>)</li><li>A comparison of issues and advantages in agile and incremental development between state of the art and an industrial case — A retrospective (<a href="https://medium.com/jss-editors-selection/a-comparison-of-issues-and-advantages-in-agile-and-incremental-development-between-state-of-the-501f95033c40">blog</a>, <a href="https://www.sciencedirect.com/science/article/pii/S0164121209000855">article</a>)</li><li>The Palladio Component Model for Model-driven Performance Prediction (<a href="https://medium.com/jss-editors-selection/the-palladio-component-model-for-model-driven-performance-prediction-a2b086a34d03">blog</a>, <a href="https://www.sciencedirect.com/science/article/pii/S0164121208001015?via%3Dihub">article</a>)</li></ul> <p>While MIP awards are already prestigious, we would like to remind readers that an MIP award from JSS is particularly impressive due to its selectivity. In 2009 (the year under consideration), JSS accepted 187 papers and our winner will be the top paper out of this group. This represents the top ½ percent of <em>accepted</em> papers, or the top 0.083 percent of <em>submitted </em>papers. Not bad.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*pKdcwsEIy16bGfve"/></figure> <p>For anyone who has had a child in a dance competition, you will remember that almost everyone gets a trophy (making for excruciatingly long award ceremonies). Yet these trophies are <strong>not</strong> participation trophies. Any group that has made it to the competition has already beaten out many groups that were not even invited to the competition. Because they recognize so many groups, dance competitions have gone beyond the normal bronze, silver, and gold designations, adding <strong>Platinum, Elite, and High Gold</strong> as their top awards. To recognize the elite achievements of these three papers we will be using these same designations.</p> <p>First, our <strong>High Gold MIP</strong> winner is…</p> <p><a href="https://medium.com/jss-editors-selection/a-comparison-of-issues-and-advantages-in-agile-and-incremental-development-between-state-of-the-501f95033c40">A comparison of issues and advantages in agile and incremental development between state of the art and an industrial case — A retrospective</a></p> <p>With 375 cites, nearly 700 views of its blog post, and well over 100 reads of its blog post, this paper has had a clear impact since its 2009 debut.</p> <p>Next, the winner of our <strong>Elite MIP</strong> is…</p> <p><a href="https://medium.com/jss-editors-selection/a-practical-evaluation-of-spectrum-based-fault-localization-a-retrospective-a0d8a947a150">A practical evaluation of spectrum-based fault localisation — A retrospective</a></p> <p>With 357 cites, over 500 blog post views, and 240 blog post reads this paper had the most active readers during our competition, perhaps making it the early leader for the 20 year MIP award.</p> <p>And finally, the <strong>Platinum MIP</strong> winner is…</p> <p><a href="https://medium.com/jss-editors-selection/the-palladio-component-model-for-model-driven-performance-prediction-a2b086a34d03">The Palladio Component Model for Model-driven Performance Prediction</a></p> <p>With 774 cites, nearly 500 blog post views, and nearly 200 blog post reads this paper was being read <em>a lot</em>, both in both pdf and blog post form, leading to an impressive impact.</p> <p><strong>CONGRATULATIONS to the authors on this special achievement. You are the 0.083 percent!</strong></p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4035bc044fb7" width="1" height="1" alt=""/>&lt;hr&gt;&lt;p&gt;<a href="https://medium.com/jss-editors-selection/and-the-winner-is-4035bc044fb7">And the winner is…</a> was originally published in <a href="https://medium.com/jss-editors-selection">JSS Editor’s Selection</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</p>]]></content><author><name></name></author></entry><entry><title type="html">JSS By The Numbers — Mid 2018 Edition</title><link href="https://xleitix.github.io/blog/2018/jss-by-the-numbers-mid-2018-edition/" rel="alternate" type="text/html" title="JSS By The Numbers — Mid 2018 Edition"/><published>2018-08-06T16:23:12+00:00</published><updated>2018-08-06T16:23:12+00:00</updated><id>https://xleitix.github.io/blog/2018/jss-by-the-numbers--mid-2018-edition</id><content type="html" xml:base="https://xleitix.github.io/blog/2018/jss-by-the-numbers-mid-2018-edition/"><![CDATA[<p>Bibliometrics — we all hate them, and yet everybody seems to be talking about them.</p> <p>In a Twitter discussion end of June, Vahid Garousi has (inspired by a <a href="https://medium.com/@csindexbr/number-of-papers-accepted-by-software-engineering-journals-in-2017-5b268923a6c9">Medium blog post</a> by CSIndexbr, a Brazilian computer science index) asked about acceptance rates for JSS:</p> <h3>Vahid Garousi on Twitter</h3> <p>@mtov It would be nice if our SE journal report their acceptance rates too (let&#39;s say in a yearly basis), like conferences...!</p> <p>It should be noted that current bibliometric data can always be found on this <a href="https://journalinsights.elsevier.com/journals/0164-1212">great site maintained by Elsevier</a>.</p> <p>However, as one of our goals is to increase transparency in the publication process, we want to oblige to Vahid’s request and provide some more detailed data about acceptance rates at the <a href="https://www.journals.elsevier.com/journal-of-systems-and-software">Journal of Systems and Software</a> in this blog post. All data is as of July 8th, 2018.</p> <p><strong>How many submissions does JSS receive</strong>?</p> <p>If there is one thing you should remember for JSS, it’s that we receive <em>many</em> submissions. To be exact: since 2014, JSS has <strong>received between 1051 and 1223</strong> (!) manuscripts per year, and accepted between 165 and 241 of them.</p> <p><strong>This makes our acceptance rate vary between 17% and 19% </strong>(not counting the currently running year).</p> <p>Interestingly, in 2017, the number of submissions was going down slightly, and so was the number of accepted papers. For 2018 it is still a bit early to tell, but it looks like the number of submissions will increase slightly in comparison to 2017.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*iRgfgLLYnOQAvWQdNgkG5w.png"/></figure> <p>To cope with this pretty overwhelming submission load, JSS uses a <a href="https://www.journals.elsevier.com/journal-of-systems-and-software/editorial-board">71-persons strong editorial board</a>, including two Editors-in-Chief, and 27 (senior or regular) associate editors.</p> <p><strong>JSS acceptance rate in details</strong></p> <p>For journals, the acceptance rate (or, conversely, the rejection rate) consists of two separate components. Some papers are <em>desk-rejected</em>, that is, rejected by the Editors-in-Chief before even being sent to peer review. Other papers are rejected after peer review.</p> <p>As we note above, JSS has had a fairly consistent overall rejection rate hovering around 82% for years (which trivially translates to an acceptance rate of about 18%, give or take). The larger part of these (between 45% and 50% of all submissions) are desk rejected. In the first half of 2018 the rate went up to about 85%. One thing is for sure: it’s not easy getting published in JSS.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*CFkUPOrT1PP_7q5Gyf7lTQ.png"/></figure> <p><strong>How long does JSS take to make decisions?</strong></p> <p>An often-discussed aspect of journal reviewing is how long it takes between manuscript submission until authors learn about a decision. This is especially true for a journal which gets as many submissions as JSS.</p> <p>Here, three different time frames are of relevance: (1) the time until an Editor-in-Chief makes a decision of whether to desk reject, (2) the time until the first review round is completed, and (3) the time until a final editorial decision (reject or accept) is made.</p> <p>JSS has traditionally taken about 1.5 weeks to make a first editorial decision, a little over 16 weeks for the first decision, and a little over 28 weeks (on average) until review is completed. Once a decision is made, things typically move quickly — the average article is online <strong>less than a week</strong> after a final camera-ready version has been sent in by the authors.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Tq9RDnfxCgVUNnE_rLQhXw.png"/></figure> <p>From Elsevier’s bibliometrics site we can also learn that the time for reviewers to make a decision varies between 10 and 16 weeks. More info can be found <a href="https://journalinsights.elsevier.com/journals/0164-1212/review_speed">here</a>.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8LBAA2WLxewp98HEEVi5LQ.png"/></figure> <p>We want to note that our Editors-in-Chief are working hard on lowering these numbers, and successfully so — for 2018, all three metrics are so far decreasing quite a bit in comparison to between 2014 and 2017.</p> <p>We hope that you found these statistical JSS tidbits interesting and helpful for your decision making, and hope that we can count on you to further increase our already staggering submission numbers.</p> <p>If you wish to reach out to us with comments regarding this data (or anything else, JSS-related), please tweet at us at <a href="https://twitter.com/jssoftware">@JSSoftware</a> or use the comment field below this article.</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6c9b8731729" width="1" height="1" alt=""/>&lt;hr&gt;&lt;p&gt;<a href="https://medium.com/jss-editors-selection/jss-by-the-numbers-mid-2018-edition-6c9b8731729">JSS By The Numbers — Mid 2018 Edition</a> was originally published in <a href="https://medium.com/jss-editors-selection">JSS Editor’s Selection</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</p>]]></content><author><name></name></author></entry><entry><title type="html">A Quick Recap of the 1st Vienna Seminar on the Relation of Software Architecture and DevOps /…</title><link href="https://xleitix.github.io/blog/2017/a-quick-recap-of-the-1st-vienna-seminar-on-the-relation-of-software-architecture-and-devops/" rel="alternate" type="text/html" title="A Quick Recap of the 1st Vienna Seminar on the Relation of Software Architecture and DevOps /…"/><published>2017-12-22T11:05:14+00:00</published><updated>2017-12-22T11:05:14+00:00</updated><id>https://xleitix.github.io/blog/2017/a-quick-recap-of-the-1st-vienna-seminar-on-the-relation-of-software-architecture-and-devops-</id><content type="html" xml:base="https://xleitix.github.io/blog/2017/a-quick-recap-of-the-1st-vienna-seminar-on-the-relation-of-software-architecture-and-devops/"><![CDATA[<h3>A Quick Recap of the 1st Vienna Seminar on the Relation of Software Architecture and DevOps / Continuous Delivery</h3> <p>This week, <a href="https://cs.univie.ac.at/swa/team/worker/infpers/Uwe_Zdun">Uwe Zdun</a>, <a href="https://scholar.google.com/citations?user=KK2le2UAAAAJ&amp;hl=en">Florian Rosenberg</a>, and me organized the <a href="https://vss.swa.univie.ac.at/2017/">“1st Vienna Seminar on the Relation of Software Architecture and DevOps / Continuous Delivery”</a>. The goal was to create a Dagstuhl-like, by-invitation event where we wanted to bring together academics and practitioners working somewhere in the vicinity of software architecture, cloud application development, DevOps, continuous delivery, and software experimentation. We were a bit frisky with the event date — we deliberately set the event to happen in the last week before Christmas, partly because meeting rooms at University of Vienna were easy to get at this time, partly because we hoped that most academics would be free of teaching. In the end, I was extremely happy with the turnout — we managed to attract 48 distinguished participants, about half of which were practitioners.</p> <p>The seminar ran over 4 full days, alternating between half-hour keynote talks, 15-minute lightning talks, and breakout discussion sessions. Uwe and his team organized awesome social events every evening, including an invitation to a gala dinner in the city hall and a visit to one of Vienna’s famous Christmas markets. There was significant tweeting, so a good way to follow the entire event is by reviewing the <a href="https://twitter.com/hashtag/vss17">#vss17 hashtag</a> on Twitter.</p> <p>Overall, our presentations and discussions seemed to circle around a few (interconnected) topics:</p> <p><strong>Software architecture, and how much of it we need in an agile, fast-moving continuous deployment projects</strong></p> <p>Maybe the most heated discussions centered around the notion of software architecture. For instance, <a href="https://www.vanheesch.net">Uwe van Heesch</a> still sees a lot of need for and value in documentation. Other participants have argued in discussion sessions that explicit, up-front architectural planning and documentation is basically dead, especially in fast-moving DevOps / cloud computing projects. Most participants don’t really seem believe anymore in traditional top-down, UML-centric architectural planning for such projects.</p> <h3>Cesare Pautasso on Twitter</h3> <p>VSS17 Prescriptive vs Descriptive documentation</p> <p><strong>The value of APIs and ecosystems</strong></p> <p>We had a set of presentations and discussions around standards, APIs, and ecosystems. <a href="http://dret.net/netdret/">Erik Wilde</a> has observed (lamented?) that “standard” has by now become almost a dirty word in the community. There were also some interesting discussions around the upcoming PSD2 regulation, which will force European banks to provide APIs to their core services. We discussed what strategies banks fundamentally have to deal with this (provide a great API to build an ecosystem? provide a by-design horrible API to keep a walled garden around their services?).</p> <h3>Janne Järvinen on Twitter</h3> <p>Pact framework - How to manage continuous integration in the cloud RT @xLeitix: Consumer-side pact at #vss17 https://t.co/eQXGtqX9Gz #devops</p> <p><strong>Micro- and Nanoservices</strong></p> <p>There was fairly broad agreement that Microservices are here to stay, and fundamentally important to deliver new features reliably and fast. <a href="https://www.innoq.com/en/staff/eberhard-wolff/">Eberhard Wolff</a> pointed us to a very interesting <a href="http://ewolff.com/microservices-demos.html">repository of microservice examples</a> that he is maintaining for this books. <a href="http://www.pautasso.info">Cesare Pautasso</a> gave a very interesting talk about one challenge with microservices, namely that it’s theoretically impossible to back them up in a way that no data inconsistencies are possible after disaster recovery. We also had some breakout discussions related to serverless computing(e.g., AWS Lambda) as one promising implementation technique for very small microservices. There was a lively debate how “new” and/or important technologies such as AWS Lambda actually are. Eberhard commented that the incredible hype in industry is at least a good indicator that there is something fundamentally relevant in the serverless movement.</p> <h3>Robert Chatley on Twitter</h3> <p>Very nice talk from @pautasso at #vss17 on disaster recovery for microservices.</p> <p><strong>Continuous integration and delivery pipelines</strong></p> <p>As far as I could tell, most participants assumed it as a given that you <em>need</em> a continuous integration and deployment pipeline to move fast. We had a number of different talks and discussions on CI builds, and how to set up CD pipelines. Eberhard has argued that even if you can’t release continuously due to your domain, the technical benefits of CI and CD alone are worth it for many companies. <a href="https://www.linkedin.com/today/posts/hashcollision">David Lebutsch</a> mentioned that he sees security as an important driver for continuous deployment — if you have a security problem and you can’t roll out a fix quickly, you have a big problem. <a href="http://mcis.polymtl.ca/bram.html">Bram Adams</a>, <a href="http://shanemcintosh.org">Shane McIntosh</a>, and others talked about CI builds, build failures, performance testing in pipelines, code reviews, and other similar topics.</p> <h3>mir on Twitter</h3> <p>Quite a lot of machine-years used daily for building at goog says beam adams at #vss17</p> <p><strong>A/B testing, and the limits thereof</strong></p> <p>Another focal point of the seminar was on software experimentation and A/B testing. <a href="http://www.ifi.uzh.ch/en/seal/people/kevic.html">Katja Kevic</a> and <a href="https://www.microsoft.com/en-us/research/people/bmurphy/">Brendan Murphy</a> talked about experimentation in Microsoft, and <a href="https://www.csc.ncsu.edu/people/lawilli3">Laurie Williams</a> reflected on a relevant Silicon Valley workshop that she has been organizing for a few years. Interestingly, a lot of discussion on the topic nowadays seems to be around when not to do it, and what the downsides and ethical challenges are. The hype certainly seems to have dampened a little bit.</p> <h3>Florian Rosenberg on Twitter</h3> <p>AB testing insights from Bing and Office presented at #vss17 by folks from @MSFTResearch</p> <p><strong>Cultural issues</strong></p> <p>Finally, even though this was not the explicit topic of any presentation, there was often an undercurrent of “culture” to many of the technical discussions at the seminar. It is clear that continuous delivery and deployment are not only technical challenges, but often need to deal with team culture and organisational management. Techniques such as A/B testing interfere with how products are typically designed, and microservices as well as DevOps change how software teams operate.</p> <h3>Eberhard Wolff on Twitter</h3> <p>Quite a lot of the talks also cover culture in DevOps and Continuous Delivery. 👍 #vss17</p> <p>Now, after the seminar is finished, it’s time for us to consider whether we want to run this back, either next or in the following year. Initial participant feedback seems to suggest that most felt the seminar was worth their time, so we are definitely open to a second iteration in the foreseeable future. Personally, I have certainly learned a lot this week!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e2a013ce1555" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>